{"version":3,"sources":["Title.js","DadJoke.js","Bikes.js","App.js","serviceWorker.js","index.js"],"names":["Title","console","log","DadJoke","useState","setJoke","useEffect","fetch","then","response","json","data","children","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","className","map","station","key","id","Station","props","name","bikesAvailable","spacesAvailable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mOAgBeA,G,MATD,WAGV,OAFAC,QAAQC,IAAI,qBAEL,4C,OCiBIC,EArBC,WAAM,MAEKC,mBAAS,IAFd,mBAENC,GAFM,WAIlBC,qBAAU,WAENC,MAAM,4DAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIL,EAAQK,EAAKC,KAAKC,SAAS,GAAGD,WAC7C,K,QCPDE,E,MAAUC,GAAmB,CAC/BC,WAAY,2BAoBDC,EAjBD,WAAO,IAAD,EACwBZ,mBAAS,IADjC,mBACTa,EADS,KACKC,EADL,KAYhB,OATAZ,qBAAU,WACNO,EAAQM,gCAAgC,CACpCC,SAAU,UACVC,UAAW,WAEf,KACCb,MAAK,SAAAG,GAAI,OAAIO,EAAgBP,QAC/B,IAEI,yBAAKW,UAAU,SACjBL,EAAaM,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAASC,IAAKD,EAAQE,GAAIF,QAASA,SAMlEG,EAAU,SAACC,GAAU,MAEyBA,EAAMJ,QAA/CK,EAFgB,EAEhBA,KAAMC,EAFU,EAEVA,eAAgBC,EAFN,EAEMA,gBAC7B,OAAO,yBAAKT,UAAU,WACjBO,EADE,MACOC,EADP,MAC0BC,I,MClBtBC,MAZf,WAGE,OAFA/B,QAAQC,IAAI,WAGN,yBAAKoB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.a4b88680.chunk.js","sourcesContent":["import React from 'react';\n\n/* \nTilsvarer function Title() { ... } \nLagrer en funksjon som en konstant\n=> returnerer alt som står inni klammeparantesene\n*/\nconst Title = () => {\n    console.log(\"Tittel lastet inn\");\n\n    return <h1>Infoskjerm</h1>;\n}\n\n// Gjør at andre js-filer har tilgang til den her\n// Få tilgang til den ved å skrive <Title />\n// Må også importe: import Title fra mappa (her: \"./Title\")\nexport default Title;","import React, { useEffect, useState } from 'react';\n\n/* \nSiste parameteren er dependencies slik at useEffect kjøres når de oppdateres, her er den tom\nFint å ha for å unngå infinite loop\n*/\nconst DadJoke = () => {\n    // useState gir state som overlever life cycle, kan bare oppdateres ved å bruke setJoke. Det som er inni klammeparentesen er default\n    const[joke, setJoke] = useState({});\n\n    useEffect(() => {\n        // Nettverkskall til oppgitt URL, får et svar fra nettverk\n        fetch(\"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\")\n        // .then sier at når promise har fått dataen den venter på, så gjøres det som er skrevet i parantesen\n        .then(response => response.json())\n        .then(json => setJoke(json.data.children[0].data));\n    }, []);\n    \n    return (\n        // Klammeparanteser inni HTML indikerer bruk av js\n    <div className=\"DadJoke\">\n        <p>{joke.title}</p>\n        <p>{joke.selftext}</p>\n    </div>\n    );\n}\n\nexport default DadJoke;","import React, { useEffect, useState } from 'react';\nimport createEnturService from '@entur/sdk';\n\n/*\nSDK er en måte å hente API på\nURL til API-greiene kan bli veldig lang\nSøk f.eks. \"bedrift sdk\"\n*/\n\nconst service = createEnturService({ \n    clientName: 'esmena-informasjonkurs' \n});\n\nconst Bikes = () => {\n    const [bikeStations, setBikeStations] = useState([]);\n\n    useEffect(() => {\n        service.getBikeRentalStationsByPosition({\n            latitude: 63.428311,\n            longitude: 10.392514,\n        },\n        230)\n        .then(data => setBikeStations(data));\n    }, []);\n\n    return <div className=\"bikes\">\n        {bikeStations.map(station => <Station key={station.id} station={station} />)}\n    </div>;\n};\n\nexport default Bikes;\n\nconst Station = (props) => {\n    // Pakker ut flere variabler fra et objekt\n    const {name, bikesAvailable, spacesAvailable} = props.station;\n    return <div className=\"station\">\n        {name} - {bikesAvailable} : {spacesAvailable}\n    </div>;\n};","import React from 'react';\nimport Title from \"./Title\";\nimport DadJoke from \"./DadJoke\";\nimport Bikes from \"./Bikes\";\nimport './App.css';\n\nfunction App() {\n  console.log(\"Heisann\");\n\n  return (\n        <div className=\"App\">\n          <Title />\n          <DadJoke />\n          <Bikes />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}